// app/page.tsx

"use client";

import { useEffect, useState } from "react";

interface Cracker {
Â  id: number;
Â  name: string;
Â  price: string;
Â  imageUrl: string;
}

export default function HomePage() {
Â  const [crackers, setCrackers] = useState<Cracker[]>([]);
Â  const [cart, setCart] = useState<Cracker[]>([]);
Â  const [loading, setLoading] = useState(true);
Â  const [emailSending, setEmailSending] = useState(false);

Â  // Fetch crackers from backend
Â  useEffect(() => {
Â  Â  async function load() {
Â  Â  Â  const res = await fetch("/api/crackers");
Â  Â  Â  const data = await res.json();
Â  Â  Â  setCrackers(data);
Â  Â  Â  setLoading(false);
Â  Â  }
Â  Â  load();
Â  }, []);

Â  // Add to cart
Â  const addToCart = (cracker: Cracker) => {
Â  Â  setCart([...cart, cracker]);
Â  };

Â  // Remove item from cart
Â  const removeFromCart = (index: number) => {
Â  Â  const updated = [...cart];
Â  Â  updated.splice(index, 1);
Â  Â  setCart(updated);
Â  };

Â  // Clear cart
Â  const clearCart = () => {
Â  Â  setCart([]);
Â  };

Â  // Calculate total
Â  const totalAmount = cart.reduce(
Â  Â  (sum, item) => sum + parseFloat(item.price),
Â  Â  0
Â  );

Â  // Send Email Order
Â  const sendEmail = async () => {
Â  Â  if (cart.length === 0) {
Â  Â  Â  alert("Your cart is empty!");
Â  Â  Â  return;
Â  Â  }
Â  
Â  Â  const userEmail = prompt("Please enter your email to send the order:");
Â  
Â  Â  if (!userEmail || !userEmail.includes("@")) {
Â  Â  Â  alert("Valid email required to send order.");
Â  Â  Â  return;
Â  Â  }
Â  
Â  Â  setEmailSending(true);
Â  
Â  Â  const orderDetails = cart
Â  Â  Â  .map((c) => `${c.name} - â‚¹${c.price}`)
Â  Â  Â  .join("\n");
Â  
Â  Â  // Calculate total to 2 decimal places for display
Â  Â  const formattedTotal = totalAmount.toFixed(2);
Â  
Â  Â  const res = await fetch("/api/email", {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  subject: "ðŸŽ‡ New Crackers Order",
Â  Â  Â  Â  message: `${orderDetails}\n\nTotal: â‚¹${formattedTotal}`,
Â  Â  Â  Â  userEmail,
Â  Â  Â  }),
Â  Â  });
Â  
Â  Â  setEmailSending(false);
Â  
Â  Â  if (res.ok) {
Â  Â  Â  alert("Order email sent successfully!");
Â  Â  Â  clearCart();
Â  Â  } else {
Â  Â  Â  alert("Failed to send order email.");
Â  Â  }
Â  };
Â  

Â  if (loading)
Â  Â  return (
Â  Â  Â  <div className="flex justify-center items-center h-screen text-xl font-medium text-gray-600">
Â  Â  Â  Â  Loading crackers...
Â  Â  Â  </div>
Â  Â  );

Â  return (
Â  Â  <div className="min-h-screen bg-gray-100 p-6">
Â  Â  Â  <h1 className="text-4xl font-bold text-center text-pink-600 mb-8">
Â  Â  Â  Â  ðŸŽ† Crackers Store ðŸŽ‡
Â  Â  Â  </h1>

Â  Â  Â  {/* Crackers Grid */}
Â  Â  Â  {crackers.length === 0 ? (
Â  Â  Â  Â  <p className="text-center text-gray-600">No crackers available yet!</p>
Â  Â  Â  ) : (
Â  Â  Â  Â  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
Â  Â  Â  Â  Â  {crackers.map((cracker) => (
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  key={cracker.id}
Â  Â  Â  Â  Â  Â  Â  className="bg-white shadow-md rounded-2xl p-4 text-center hover:shadow-xl transition"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  src={cracker.imageUrl}
Â  Â  Â  Â  Â  Â  Â  Â  alt={cracker.name}
Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-48 object-cover rounded-xl"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <h3 className="mt-3 text-lg font-semibold text-gray-800">
Â  Â  Â  Â  Â  Â  Â  Â  {cracker.name}
Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  <p className="text-green-600 font-bold">â‚¹{cracker.price}</p>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => addToCart(cracker)}
Â  Â  Â  Â  Â  Â  Â  Â  className="bg-pink-500 text-white mt-3 px-5 py-2 rounded-lg hover:bg-pink-600 transition"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Add to Cart
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {/* Cart Section */}
Â  Â  Â  {cart.length > 0 && (
Â  Â  Â  Â  <div className="mt-12 bg-white shadow-md rounded-2xl p-6 max-w-3xl mx-auto">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-800 mb-4 text-center">
Â  Â  Â  Â  Â  Â  ðŸ›’ Your Cart
Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  <ul className="divide-y divide-gray-200">
Â  Â  Â  Â  Â  Â  {cart.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  <li
Â  Â  Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex justify-between items-center py-2 text-gray-700"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.name} - â‚¹{item.price}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => removeFromCart(index)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-red-500 hover:underline"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Remove
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  <div className="text-right mt-4 text-lg font-semibold text-green-700">
Â  Â  Â  Â  Â  Â  Total: â‚¹{totalAmount.toFixed(2)}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="flex flex-col sm:flex-row gap-3 justify-end mt-6">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={clearCart}
Â  Â  Â  Â  Â  Â  Â  className="bg-gray-400 text-white px-5 py-2 rounded-lg hover:bg-gray-500 transition"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Clear Cart
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={sendEmail}
Â  Â  Â  Â  Â  Â  Â  disabled={emailSending}
Â  Â  Â  Â  Â  Â  Â  className="bg-blue-600 text-white px-5 py-2 rounded-lg hover:bg-blue-700 transition"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {emailSending ? "Sending..." : "Send Order Email"}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}